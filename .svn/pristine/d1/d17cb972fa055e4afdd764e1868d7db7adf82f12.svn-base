package com.cucrz.idss.hadoop.etl.mapreduce.map.impl.guangdong;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapred.Counters.Counter;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.mortbay.log.Log;

import com.cucrz.idss.hadoop.etl.mapreduce.constants.OtherConstants;
import com.cucrz.idss.hadoop.etl.mapreduce.constants.TypeConstans;
import com.cucrz.idss.hadoop.etl.mapreduce.map.IETLMapper;
import com.cucrz.idss.hadoop.etl.mapreduce.rules.DateCheck;
import com.cucrz.idss.hadoop.etl.util.ReadCacheUtil;

public class ETLMapper implements IETLMapper {

	private static Configuration conf;
	private static Map<String, String> channelName;
	private static Map<String, String> channelChannel;
	private static Map<String, String> regionCodeList;
	private static Map<String, String> VODInfoList = null;
	private static Map<String, String> newChannel = null;
	private static Map<String, String> newCloumn = null;
	// mapper的计数器
	@Override
	public Map<String, Counter> etlMapSetupGetCounter(Context context) {
		Map<String, Counter> map = new HashMap<String, Counter>();
		Counter mapTotleRows = (Counter) context.getCounter("map", "TotleRows");
		Counter mapFmtError = (Counter) context
				.getCounter("map", "mapFmtError");
		Counter mapDateIdError = (Counter) context.getCounter("map",
				"mapDateIdError");
		Counter mapOutputRows = (Counter) context.getCounter("map",
				"mapOutputRows");
		map.put("TotleRows", mapTotleRows);
		map.put("mapOutputRows", mapOutputRows);
		map.put("mapFmtError", mapFmtError);
		map.put("mapDateIdError", mapDateIdError);

		return map;
	}

	@Override
	public String etlMapper(String inputLine, String inFilename, String operId,
			String inputDateID, Context context,
			Map<String, Map<String, String>> storage,
			Map<String, Counter> counterMap, Map<String, String> newChannel,
			Map<String, String> newCloumn) {
		this.newChannel = newChannel;
		this.newCloumn = newCloumn;
		conf = context.getConfiguration();
		VODInfoList = storage.get(conf.get("idss_ETL_Cache_VODInfoList"));
		Counter mapDateIdError = counterMap.get("mapDateIdError");
		regionCodeList=storage.get(conf
				.get("idss_ETL_Cache_UniqueRegionList"));
		channelName = storage.get(conf
				.get("idss_ETL_Cache_NameToUniqueChannel"));
		channelChannel = storage.get(conf
				.get("idss_ETL_Cache_OriginalChannelToUniqueChannel"));
		String record = "";
		String[] split = inputLine.split(OtherConstants.VERTICAL_DELIM_REGEX);
		String userID = "";
		String[] bizSplit = new String[10];
		if (split.length == 5) {
			bizSplit = split[4].split(OtherConstants.CARET_DELIM_REGEX);
		} else if (split.length == 4) {
			bizSplit = split[3].split(OtherConstants.CARET_DELIM_REGEX);
		} else {
			return record;
		}

		if (split[0].toString().length() < 4) {
			userID = split[1];
		} else {
			userID = split[0];
		}
		String head = userID + OtherConstants.VERTICAL_DELIM 
				+ ReadCacheUtil.getUniqueRegion(regionCodeList, split[2],TypeConstans.default_Guangdong)
				+ OtherConstants.TAB_DELIM;
		String date = "";
		String time = "";
		try {
			date = bizSplit[0].substring(0, 10);
			time = bizSplit[0].substring(11, 19);
		} catch (Exception e) {
			Log.warn("日期格式不正确，记录丢弃");
			return record;
		}
		if (DateCheck.dateCheckRule(date, inputDateID)) {
			if(bizSplit.length>1){
			String bizType = bizSplit[1];
			String tail = getBizParameter(bizType, bizSplit);
			if (!tail.equals("")) {
				record = head + date + " " + time
						+ OtherConstants.VERTICAL_DELIM + tail;
			} else {
				return record;
			}
			}
		} else {
			mapDateIdError.increment(1);
			return record;
		}
		return record;
	}

	@Override
	public Map<String, Map<String, String>> etlMapSetupDisCache(
			Context context, Map<String, Map<String, String>> storage) {
		Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();
		Map<String, String> cacheFileNameMap = context.getConfiguration()
				.getValByRegex("^idss_ETL_Cache");
		Set<String> cacheFileNameSet = cacheFileNameMap.keySet();
		for (String cacheFileName : cacheFileNameSet) {
			cacheFileName = cacheFileNameMap.get(cacheFileName);
			try {
				BufferedReader reader = new BufferedReader(new FileReader(
						cacheFileName));
				resultMap.put(cacheFileName,
						ReadCacheUtil.readCache(reader, cacheFileName));
			} catch (Exception e) {
				Log.warn("缓存文件格式或名称有误，请检查！"+cacheFileName);
				e.printStackTrace();
			}
		}
		return resultMap;
	}

	public String getBizParameter(String bizType, String[] bizSplit) {
		String other = "";
		String[] split = other.split(OtherConstants.VERTICAL_DELIM_REGEX);
		if (bizType.equals("04")) {// 直播
			if (bizSplit.length > 8) {
				other = TypeConstans.EVENT_LIVE_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ "|||"
						+ bizSplit[7]
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[8]
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[2]
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[3]
						+ OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,channelName,
								channelChannel, bizSplit[2], bizSplit[3]);
			}
		} else if (bizType.equals("06")) {// 回看
			if (bizSplit.length > 10) {
				other = TypeConstans.EVENT_LOOKBACK_PRO_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[3]
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[4].substring(0, 10)
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[4].substring(11, 19)
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[7].replace("T", " ").replace("Z", "")
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[10]
						+ OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,channelName,
								channelChannel, bizSplit[2],"");
			}
		} else if (bizType.equals("03")) {// VOD
			if (bizSplit.length > 8) {
				other = TypeConstans.EVENT_VOD_PROGRAM_BIZ
						+ OtherConstants.VERTICAL_DELIM + bizSplit[2]
						+ OtherConstants.VERTICAL_DELIM + bizSplit[3]
						+ OtherConstants.VERTICAL_DELIM + "0"
						+ OtherConstants.VERTICAL_DELIM + bizSplit[8]
						+ OtherConstants.VERTICAL_DELIM + bizSplit[6]
						+ OtherConstants.VERTICAL_DELIM + bizSplit[7]
						+ OtherConstants.VERTICAL_DELIM ;
				ReadCacheUtil.getNewVODInfo(newCloumn, VODInfoList, bizSplit[2]
						+ "," + bizSplit[3], bizSplit[7] + ",");
			}
		} else if (bizType.equals("05")) {// 时移
			if (bizSplit.length > 4) {
				other = TypeConstans.EVENT_TIMESHIFT_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ "|||"
						+ bizSplit[4].replace("T", " ").replace("Z", "")
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[3]
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,channelName,
								channelChannel, bizSplit[2], "");
			}
		} else if (bizType.equals("0b")) {// 开机
			if (bizSplit.length > 1) {
				other = TypeConstans.ON_CODE + OtherConstants.VERTICAL_DELIM
						+ "1";
			}
		} else if (bizType.equals("0c")) {// 关机
			if (bizSplit.length > 1) {
				other = TypeConstans.OFF_CODE + OtherConstants.VERTICAL_DELIM
						+ "1";
			}
		}else if (bizType.equals("0a")) {// 首页推荐
			if (bizSplit.length > 1) {
				other = TypeConstans.EVENT_UNUSE;
			}
		} else if (bizType.equals("09")) {//广告
			if (bizSplit.length > 5) {
				if (bizSplit[3].equals("00") || bizSplit[3].equals("01")
						|| bizSplit[3].equals("06")) {
					other = TypeConstans.EVENT_AFFECT_ADS
							+ OtherConstants.VERTICAL_DELIM + bizSplit[2]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[3]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[4]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[5];
				} else {
					other = TypeConstans.EVENT_NOT_AFFECT_ADS
							+ OtherConstants.VERTICAL_DELIM + bizSplit[2]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[3]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[4]
							+ OtherConstants.VERTICAL_DELIM + bizSplit[5];
				}
			}
		} else if (bizType.equals("01")) {//
			if (bizSplit.length > 2) {
				other = TypeConstans.EVENT_UNUSE
						+ OtherConstants.VERTICAL_DELIM + bizSplit[2];
			}
		} else if (bizType.equals("02")) {// vod页面
			if (bizSplit.length > 6) {
				other = TypeConstans.EVENT_VOD_PAGE_BIZ
						+ OtherConstants.VERTICAL_DELIM + "|" + bizSplit[2]
						+ OtherConstants.VERTICAL_DELIM + bizSplit[6] + "|0|0";
			}
		}
		return other;
	}
}
