package com.cucrz.idss.hadoop.etl.mapreduce.map.impl.zhujiang;

import java.io.BufferedReader;
import java.io.FileReader;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapred.Counters.Counter;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.log4j.Logger;

import com.cucrz.idss.hadoop.etl.mapreduce.constants.OtherConstants;
import com.cucrz.idss.hadoop.etl.mapreduce.constants.TypeConstans;
import com.cucrz.idss.hadoop.etl.mapreduce.map.IETLMapper;
import com.cucrz.idss.hadoop.etl.mapreduce.rules.DateCheck;
import com.cucrz.idss.hadoop.etl.util.DateUtil;
import com.cucrz.idss.hadoop.etl.util.ReadCacheUtil;

public class ETLMapper implements IETLMapper {
	private static Configuration conf = null;
	private static Map<String, String> channelName = null;
	private static Map<String, String> channelChannel = null;
	private static Map<String, String> VODInfoList = null;
	private static Map<String, String> newChannel = null;
	private static Map<String, String> newCloumn = null;
	private static Map<String, String> lookbackList = null;
	private static Logger log = Logger.getLogger(ETLMapper.class);
	@Override
	public Map<String, Map<String, String>> etlMapSetupDisCache(
			Context context, Map<String, Map<String, String>> storage) {

		Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();
		Map<String, String> cacheFileNameMap = context.getConfiguration()
				.getValByRegex("^idss_ETL_Cache");
		Set<String> cacheFileNameSet = cacheFileNameMap.keySet();
		for (String cacheFileName : cacheFileNameSet) {
			cacheFileName = cacheFileNameMap.get(cacheFileName);
			try {
				BufferedReader reader = new BufferedReader(new FileReader(
						cacheFileName));
				resultMap.put(cacheFileName,
						ReadCacheUtil.readCache(reader, cacheFileName));
				log.info("缓存文件：" + cacheFileName+"  加载完成");
			} catch (Exception e) {
				log.warn("缓存文件格式或名称有误，请检查！" + cacheFileName);
				e.printStackTrace();
			}
		}
		return resultMap;
	}

	@Override
	public Map<String, Counter> etlMapSetupGetCounter(Context context) {
		Map<String, Counter> map = new HashMap<String, Counter>();
		Counter mapTotleRows = (Counter) context.getCounter("map", "TotleRows");
		Counter mapFmtError = (Counter) context
				.getCounter("map", "mapFmtError");
		Counter mapDateIdError = (Counter) context.getCounter("map",
				"mapDateIdError");
		Counter mapOutputRows = (Counter) context.getCounter("map",
				"mapOutputRows");
		map.put("TotleRows", mapTotleRows);
		map.put("mapOutputRows", mapOutputRows);
		map.put("mapFmtError", mapFmtError);
		map.put("mapDateIdError", mapDateIdError);
		return map;
	}

	@Override
	public String etlMapper(String inputLine, String inFileName, String operId,
			String inputDateID, Context context,
			Map<String, Map<String, String>> storage,
			Map<String, Counter> counterMap, Map<String, String> newChannel,
			Map<String, String> newCloumn) {
		this.newChannel = newChannel;
		this.newCloumn = newCloumn;
		conf = context.getConfiguration();
		VODInfoList = storage.get(conf.get("idss_ETL_Cache_VODInfoList"));
		channelName = storage.get(conf
				.get("idss_ETL_Cache_NameToUniqueChannel"));
		channelChannel = storage.get(conf
				.get("idss_ETL_Cache_OriginalChannelToUniqueChannel"));
		lookbackList = storage.get(conf.get("idss_ETL_Cache_LookBackList"));
		Counter mapDateIdError = counterMap.get("mapDateIdError");
		String record = "";
		int fileIndex = inFileName.lastIndexOf(OtherConstants.FILE_SEPARATOR);
		String fileName = inFileName.substring(fileIndex + 1);
		record = getBizRecord(fileName, inputLine);
		if (!record.equals("")) {
			String[] s = record.split(OtherConstants.TAB_DELIM);
			String[] split = s[1].split(OtherConstants.VERTICAL_DELIM_REGEX);
			int index = split[0].indexOf(" ");
			String date = "";
			try {
				date = split[0].substring(0, index);
			} catch (Exception e) {
				log.warn("日期格式不正确，记录丢弃");
				return "";
			}
			if (DateCheck.dateCheckRule(date, inputDateID)) {
				return record;
			} else {
				mapDateIdError.increment(1);
				return "";
			}
		} else {
			return "";
		}
	}

	public String getBizRecord(String inFileName, String inputLine) {
		if (inFileName.equalsIgnoreCase("eventclientboxpower.csv")) {// 开关机数据
			return getOCEvent(inputLine);
		} else if (inFileName.equalsIgnoreCase("EventClientChannelTune.csv")) {// 直播
			return getLiveProEvent(inputLine);
		} else if (inFileName.equalsIgnoreCase("eventclienttrickstate.csv")) {// VOD，时移，回看
			return getTrickState(inputLine);
		} else if (inFileName.equalsIgnoreCase("eventclientmenu.csv")) {// 其他
			return getUnuse(inputLine);
		} else if (inFileName.equalsIgnoreCase("eventclientbrowsebar.csv")) {// 其他
			return getUnuse(inputLine);
		} else {
			return "";
		}
	}

	public String getOCEvent(String inputLine) {
		String[] split = inputLine.split(OtherConstants.COMMA_DELIM);
		StringBuffer tmp = new StringBuffer();
		try {
			if (split.length > 6) {
				String date = DateUtil.DATE_FORMATER
						.format(DateUtil.DATEFORMATER.parse(split[6]));
				String time = DateUtil.TIME_FORMATER
						.format(DateUtil.TIMEFORMATER.parse(ZhujiangUtil
								.supplementTime(split[5])));
				tmp.append(split[1]).append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.default_Zhujiang)
						.append(OtherConstants.TAB_DELIM).append(date)
						.append(" " + time)
						.append(OtherConstants.VERTICAL_DELIM);
				if (split[3].equals("ON")) {
					tmp.append(TypeConstans.ON_CODE)
							.append(OtherConstants.VERTICAL_DELIM).append("1");
				} else if (split[3].equals("OFF")) {
					tmp.append(TypeConstans.OFF_CODE)
							.append(OtherConstants.VERTICAL_DELIM).append("1");
				}
			}

		} catch (ParseException e) {
			e.printStackTrace();
		}
		inputLine = tmp.toString();
		return inputLine;
	}

	public String getLiveProEvent(String inputLine) {
		String[] split = inputLine.split(OtherConstants.COMMA_DELIM);
		StringBuffer tmp = new StringBuffer();
		try {
			if (split.length > 5) {
				String date = DateUtil.DATE_FORMATER
						.format(DateUtil.DATEFORMATER.parse(split[1]));
				String time = DateUtil.TIME_FORMATER
						.format(DateUtil.TIMEFORMATER.parse(ZhujiangUtil
								.supplementTime(split[2])));
				tmp.append(split[3])
						.append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.default_Zhujiang)
						.append(OtherConstants.TAB_DELIM)
						.append(date + " " + time)
						.append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.EVENT_LIVE_BIZ)
						.append(OtherConstants.VERTICAL_DELIM)
						.append("|||0|0|")
						.append(split[5])
						.append(OtherConstants.VERTICAL_DELIM)
						.append("|")
						.append(ReadCacheUtil.getUniqueChannel(newChannel,
								channelName, channelChannel, "##"+split[5], ""));
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		inputLine = tmp.toString();
		return inputLine;
	}

	public String getTrickState(String inputLine) {
		String[] split = inputLine.split(OtherConstants.COMMA_DELIM);
		StringBuffer tmp = new StringBuffer();
		try {
			if (split.length > 10) {
				String date = DateUtil.DATE_FORMATER
						.format(DateUtil.DATEFORMATER.parse(split[1]));
				String time = DateUtil.TIME_FORMATER
						.format(DateUtil.TIMEFORMATER.parse(ZhujiangUtil
								.supplementTime(split[2])));
				tmp.append(split[3]).append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.default_Zhujiang)
						.append(OtherConstants.TAB_DELIM)
						.append(date + " " + time)
						.append(OtherConstants.VERTICAL_DELIM);
				String[] lookbackInfo = ZhujiangUtil.getLookBackInfo(
						lookbackList, split[4]);
				if (lookbackInfo != null&&lookbackInfo.length>4) {
					if (split[6].equals("TIMESHIFT")) {
						tmp.append(TypeConstans.EVENT_TIMESHIFT_BIZ)
								.append(OtherConstants.VERTICAL_DELIM)
								.append("|||")
								.append(lookbackInfo[2] + " " + lookbackInfo[3])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(ZhujiangUtil.playStatusTran(split[5]))
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[4])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(ReadCacheUtil.getUniqueChannel(
										newChannel, channelName,
										channelChannel, split[4], ""));
					} else {
						tmp.append(TypeConstans.EVENT_LOOKBACK_PRO_BIZ)
								.append(OtherConstants.VERTICAL_DELIM)
								.append(split[4])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[0])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[1])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[2])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[3])
								.append(OtherConstants.VERTICAL_DELIM)
								.append("0")
								.append(OtherConstants.VERTICAL_DELIM)
								.append("1")
								.append(OtherConstants.VERTICAL_DELIM)
								.append(lookbackInfo[4]);
					}
				} else {
					if (split[6].equals("VOD") || split[6].equals("NEWLIVE")
							|| split[6].equals("SMOOTHSTREAMING")) {
						String[] vodInfo = ZhujiangUtil.getNewVODInfo(
								newCloumn, VODInfoList, split[4], "");
						tmp.append(TypeConstans.EVENT_VOD_PROGRAM_BIZ)
								.append(OtherConstants.VERTICAL_DELIM)
								.append(split[4])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(vodInfo[1])
								.append(OtherConstants.VERTICAL_DELIM)
								.append("0")
								.append(OtherConstants.VERTICAL_DELIM)
								.append("0")
								.append(OtherConstants.VERTICAL_DELIM)
								.append(ZhujiangUtil.playStatusTran(split[5]))
								.append(OtherConstants.VERTICAL_DELIM)
								.append(vodInfo[2])
								.append(OtherConstants.VERTICAL_DELIM)
								.append(vodInfo[3]);
					} else if (split[6].equals("TIMESHIFT")) {
						tmp.append(TypeConstans.EVENT_TIMESHIFT_BIZ)
								.append(OtherConstants.VERTICAL_DELIM)
								.append("|||")
								.append("")
								.append(OtherConstants.VERTICAL_DELIM)
								.append(ZhujiangUtil.playStatusTran(split[5]))
								.append(OtherConstants.VERTICAL_DELIM)
								.append("")
								.append(OtherConstants.VERTICAL_DELIM)
								.append(ReadCacheUtil.getUniqueChannel(
										newChannel, channelName,
										channelChannel, split[4], ""));
					}
				}
			}
		} catch (ParseException e) {
			e.printStackTrace();
			return "";
		}
		inputLine = tmp.toString();
		return inputLine;
	}

	public String getUnuse(String inputLine) {
		String[] split = inputLine.split(OtherConstants.COMMA_DELIM);
		StringBuffer tmp = new StringBuffer();
		try {
			if (split.length > 5) {
				String date = DateUtil.DATE_FORMATER
						.format(DateUtil.DATEFORMATER.parse(split[1]));
				String time = DateUtil.TIME_FORMATER
						.format(DateUtil.TIMEFORMATER.parse(ZhujiangUtil
								.supplementTime(split[2])));

				tmp.append(split[3]).append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.default_Zhujiang)
						.append(OtherConstants.TAB_DELIM)
						.append(date + " " + time)
						.append(OtherConstants.VERTICAL_DELIM)
						.append(TypeConstans.EVENT_UNUSE)
						.append(OtherConstants.VERTICAL_DELIM).append(split[5])
						.append(OtherConstants.VERTICAL_DELIM).append("UN");
			}
		} catch (ParseException e) {
			e.printStackTrace();
		}
		inputLine = tmp.toString();
		return inputLine;
	}
}
