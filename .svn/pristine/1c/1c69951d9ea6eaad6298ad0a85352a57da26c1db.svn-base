package com.cucrz.idss.hadoop.etl.mapreduce.map.impl.fujiandianxin;

import java.io.BufferedReader;
import java.io.FileReader;
import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.mapred.Counters.Counter;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.log4j.Logger;
import org.mortbay.log.Log;

import com.cucrz.idss.hadoop.etl.mapreduce.constants.OtherConstants;
import com.cucrz.idss.hadoop.etl.mapreduce.constants.TypeConstans;
import com.cucrz.idss.hadoop.etl.mapreduce.map.IETLMapper;
import com.cucrz.idss.hadoop.etl.mapreduce.rules.DateCheck;
import com.cucrz.idss.hadoop.etl.util.DateUtil;
import com.cucrz.idss.hadoop.etl.util.ReadCacheUtil;

public class ETLMapper implements IETLMapper {
	private static Configuration conf = null;
	private static Map<String, String> channelName = null;
	private static Map<String, String> channelChannel = null;
	private static Map<String, String> VODInfoList = null;
	private static Map<String, String> newChannel = null;
	private static Map<String, String> newCloumn = null;
	private static Logger log =Logger.getLogger(ETLMapper.class);
	// mapper的计数器
	@Override
	public Map<String, Counter> etlMapSetupGetCounter(Context context) {
		Map<String, Counter> map = new HashMap<String, Counter>();
		Counter mapTotleRows = (Counter) context.getCounter("map", "TotleRows");
		Counter mapOutputRows = (Counter) context.getCounter("map",
				"mapOutputRows");
		Counter mapFmtError = (Counter) context
				.getCounter("map", "mapFmtError");
		Counter mapDateIdError = (Counter) context.getCounter("map",
				"mapDateIdError");
		Counter mapParamError = (Counter) context.getCounter("map",
				"mapParamError");
		map.put("TotleRows", mapTotleRows);
		map.put("mapOutputRows", mapOutputRows);
		map.put("mapFmtError", mapFmtError);
		map.put("mapDateIdError", mapDateIdError);
		map.put("mapParamError", mapParamError);
		return map;
	}

	@Override
	public String etlMapper(String inputLine, String inFileName, String operId,
			String inputDateID, Context context,
			Map<String, Map<String, String>> storage,
			Map<String, Counter> counterMap, Map<String, String> newChannel,
			Map<String, String> newCloumn) {
		this.newChannel = newChannel;
		this.newCloumn = newCloumn;
		conf = context.getConfiguration();
		VODInfoList = storage.get(conf.get("idss_ETL_Cache_VODInfoList"));
		channelName = storage.get(conf
				.get("idss_ETL_Cache_NameToUniqueChannel"));
		channelChannel = storage.get(conf
				.get("idss_ETL_Cache_OriginalChannelToUniqueChannel"));
		Counter mapParamError = counterMap.get("mapParamError");
		Counter mapDateIdError = counterMap.get("mapDateIdError");
		String record = "";
		int fileIndex = inFileName.lastIndexOf(OtherConstants.FILE_SEPARATOR);
		String fileName = inFileName.substring(fileIndex + 1);
		if(fileName.equals("view_info.txt")){
		String[] split = inputLine.split(OtherConstants.VERTICAL_DELIM_REGEX,30);
		if (split.length > 3) {
				String bizType = split[3];
				String date = "";
				String time = "";
				try {
					date = DateUtil.DATE_FORMATER.format(DateUtil.DATE_TIME_FULL.parse(split[1]));
					time = DateUtil.TIME_FORMATER.format(DateUtil.DATE_TIME_FULL.parse(split[1]));
				} catch (Exception e) {
					Log.warn("日期格式不正确，记录丢弃");
					return "";
				}
				String head = split[0] + OtherConstants.VERTICAL_DELIM
										+ "350000" + OtherConstants.TAB_DELIM 
										+ date + " "+ time + OtherConstants.VERTICAL_DELIM ;
				if (DateCheck.dateCheckRule(date, inputDateID)) {
					String para = getBizParameter(bizType, split);
					if (para != "") {
						record = head + para;
					} else {
						head = split[0] + OtherConstants.VERTICAL_DELIM
								+ "350000" + OtherConstants.TAB_DELIM + date
								+ " " + time + OtherConstants.VERTICAL_DELIM
								+ TypeConstans.HEART_BEAT
								+ OtherConstants.VERTICAL_DELIM;
						record = head + "Z";
						mapParamError.increment(1);
					}
				} else {
					mapDateIdError.increment(1);
					return "";
				}
		}
	}
		return record;
	}

	@Override
	public Map<String, Map<String, String>> etlMapSetupDisCache(
			Context context, Map<String, Map<String, String>> storage) {
		Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();
		Map<String, String> cacheFileNameMap = context.getConfiguration()
				.getValByRegex("^idss_ETL_Cache");
		Set<String> cacheFileNameSet = cacheFileNameMap.keySet();
		for (String cacheFileName : cacheFileNameSet) {
			cacheFileName = cacheFileNameMap.get(cacheFileName);
			try {
				BufferedReader reader = new BufferedReader(new FileReader(
						cacheFileName));
				resultMap.put(cacheFileName,
						ReadCacheUtil.readCache(reader, cacheFileName));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return resultMap;
	}

	public  String getBizParameter(String bizType, String[] bizSplit) {
		String other = "";
		// String[] split=other.split(OtherConstants.VERTICAL_DELIM_REGEX);
		// 直播
		if (bizType.equals("2") ){
			if (bizSplit.length >6) {
				other = TypeConstans.EVENT_LIVE_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[4]
						+ OtherConstants.VERTICAL_DELIM
						+ "0"
						+ OtherConstants.VERTICAL_DELIM
						+ "1"
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[4]
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[6]
						+ OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,channelName, channelChannel, "##" + bizSplit[4],bizSplit[6]);
			}
		}
		// 回看节目
		else if (bizType.equals("3")) {
			if (bizSplit.length >8) {
				try {
				other = TypeConstans.EVENT_LOOKBACK_PRO_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[5]
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[6]
						+ OtherConstants.VERTICAL_DELIM
						+ DateUtil.DATE_FORMATER.format(DateUtil.DATE_TIME_FULL.parse(bizSplit[8]))
						+ OtherConstants.VERTICAL_DELIM
						+ DateUtil.TIME_FORMATER.format(DateUtil.DATE_TIME_FULL.parse(bizSplit[8]))
						+ OtherConstants.VERTICAL_DELIM
						+ "0"
						+ OtherConstants.VERTICAL_DELIM
						+ "1"
						+OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,
								channelName, channelChannel, "##"+bizSplit[4], bizSplit[2]);
				} catch (ParseException e) {
					e.printStackTrace();
					return "";
				}
			}
		}
		// VOD节目
		else if (bizType.equals("1")) {
			if (bizSplit.length >6) {
				other = TypeConstans.EVENT_VOD_PROGRAM_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[4] 
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[6] 
						+ OtherConstants.VERTICAL_DELIM
						+ "0"
						+ OtherConstants.VERTICAL_DELIM
						+ "0" 
						+ OtherConstants.VERTICAL_DELIM
						+ "1"
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[7]
						+ OtherConstants.VERTICAL_DELIM;
				ReadCacheUtil.getNewVODInfo(newCloumn, VODInfoList, bizSplit[4]
						+ "," + bizSplit[6], bizSplit[7] + ",");
			}
		}
		// 时移
		else if (bizType.equals("5")) {
			if (bizSplit.length >6) {
				other = TypeConstans.EVENT_TIMESHIFT_BIZ
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+bizSplit[4]
						+ OtherConstants.VERTICAL_DELIM
						+ OtherConstants.VERTICAL_DELIM
						+ "1"
						+ OtherConstants.VERTICAL_DELIM
						+ bizSplit[6]
						+ OtherConstants.VERTICAL_DELIM
						+ ReadCacheUtil.getUniqueChannel(newChannel,
								channelName, channelChannel, "##" + bizSplit[4],
								bizSplit[6]);
			}
		}
		return other;
	}

}
